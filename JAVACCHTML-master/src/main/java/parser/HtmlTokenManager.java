/* Generated By:JavaCC: Do not edit this line. HtmlTokenManager.java */
package parser;

/** Token Manager. */
public class HtmlTokenManager implements HtmlConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x440020000L) != 0L)
         {
            jjmatchedKind = 7;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x440020000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 0x440020000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
            return 7;
         }
         return -1;
      case 3:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active0 & 0x440000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x440000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 34:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x180063000040000L);
      case 46:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 47:
         return jjStopAtPos(0, 33);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x7ff9c83f71dc00L);
      case 62:
         return jjStopAtPos(0, 13);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x80023000000000L);
      case 44:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 46:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x12aa88015214800L);
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40010020020000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00400000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4042000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x15000000008000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 47:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 62:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004800400000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x50000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000020000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000001000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000008000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40030000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000a900000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008004000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2a000400010400L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x80001000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa4_0(active0, 0x440000000L);
      case 62:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 52);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x82029001001000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000800000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20004000100000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000004000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100008800000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x14200000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x40810000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000028800L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         break;
      case 34:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 34);
         break;
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000200000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800040000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x404000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x81201010008400L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000800L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000010000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40010000000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x1220000008000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x808000040000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000800010800L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x404001000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40010000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80081000400000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x41010800000000L);
      case 34:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         break;
      case 61:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         break;
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x82001000010000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x808000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x180000400000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x500000400000L);
      case 34:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 41);
         break;
      case 61:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 43);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         break;
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000800000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40210001000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L);
      case 34:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(8, 36);
         break;
      case 62:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 24);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(8, 47);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000800000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000400000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x40010000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa10_0(active0, 0x81000800040000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000400000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x40010000000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);
      case 34:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(10, 18);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(10, 35);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(10, 48);
         break;
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40010000000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L);
      case 34:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(11, 55);
         break;
      case 61:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(11, 38);
         break;
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      case 34:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      case 61:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(12, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L);
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(12, 39);
         break;
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0x40400000000000L);
      case 61:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L);
      case 34:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L);
      case 61:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L);
      case 34:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(15, 44);
         break;
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(16, 46);
         break;
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000000000L);
      case 120:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000000000L);
      case 34:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa23_0(active0, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000000000000L);
      case 34:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(23, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa25_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(25, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(0, 4);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(5, 8);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 3, 4, 5, 2, 3, 4, 5, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\74\150\164\155\154\76", "\74\57\150\164\155\154\76", "\74\150\145\141\144", "\76", 
"\74\57\150\145\141\144\76", "\74\164\151\164\154\145\76", "\74\57\164\151\164\154\145\76", 
"\167\151\144\164\150\75\42", "\42\54\40\150\145\151\147\150\164\75\42", "\42", "\74\142\157\144\171\76", 
"\74\57\142\157\144\171\76", "\74\154\141\171\157\165\164\40\162\157\167\163\75", "\40\143\157\154\163\75", 
"\74\57\154\141\171\157\165\164\76", "\74\162\157\167\76", "\74\57\162\157\167\76", "\74\143\157\154\76", 
"\74\57\143\157\154\76", "\74\151\155\147\40", "\163\162\143\75\42", "\56", "\56\56", "\57", 
"\141\154\164\75\42", "\74\154\141\142\145\154\40\151\144\75\42", 
"\42\40\166\141\154\165\145\75\42", "\42\40\57\76", "\74\162\141\144\151\157\107\162\157\165\160\76", 
"\74\57\162\141\144\151\157\107\162\157\165\160\76", 
"\74\151\156\160\165\164\40\164\171\160\145\75\42\162\141\144\151\157\42\40\151\144\75\42", "\42\40\156\141\155\145\75\42", "\42\76", "\74\57\151\156\160\165\164\76", 
"\74\163\145\154\145\143\164\40\156\141\155\145\40\75\40\42", "\74\57\163\145\154\145\143\164\76", 
"\74\157\160\164\151\157\156\40\166\141\154\165\145\40\75\40\42", "\74\57\157\160\164\151\157\156\76", 
"\74\164\141\142\154\145\40\151\144\75\42", "\74\57\164\141\142\154\145\76", "\74\164\162\76", "\74\57\164\162\76", 
"\74\164\144\76", "\74\57\164\144\76", 
"\74\151\156\160\165\164\40\164\171\160\145\40\75\40\42\164\145\170\164\42\40\151\144\40\75\42", "\42\40\166\141\154\165\145\163\40\75\40\42", "\42\57\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffffffffffffa1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[7];
static private final int[] jjstateSet = new int[14];
static protected char curChar;
/** Constructor. */
public HtmlTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public HtmlTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 7; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
